title: Rust
icon: ⚙️

---##
title: Uutils
url: https://github.com/uutils/
description: Reimplementation of core tools in Rust
date: 2025-02-21
---!##

---##
title: Writing a Simple Driver in Rust
url: https://scorpiosoftware.net/2025/02/08/writing-a-simple-driver-in-rust/
date: 2025-02-08
---!##

---##
title: Tauri
url: https://tauri.app/
description: Create small, fast, secure, cross-platform applications
date: 2025-01-30
---!##

---##
title: Rust needs an extended standard library
url: https://kerkour.com/rust-stdx
date: 2024-10-09
---!##

---##
title: book: The Little Book of Rust Books
url: https://lborb.github.io/book/
date: 2024-02-17
---!##

---##
title: book: Rust Design Patterns
url: https://rust-unofficial.github.io/patterns/
date: 2024-02-17
---!##

---##
title: book: High Assurance Rust
url: https://highassurance.rs/
date: 2023-01-21
---!##

---##
title: book: Command-Line Rust
url: https://www.oreilly.com/library/view/command-line-rust/9781098109424/
date: 2023-01-21
---!##

---##
title: Using unwrap() in Rust is okay
url: https://blog.burntsushi.net/unwrap/,https://news.ycombinator.com/item?id=32385102,https://doc.rust-lang.org/book/ch09-03-to-panic-or-not-to-panic.html#cases-in-which-you-have-more-information-than-the-compiler
date: 2022-08-08
---!##

---##
title: Transmitic
url: https://transmitic.net
description: Encrypted peer-to-peer file transfer and sharing
date: 2022-08-06
---!##

---##
title: Make a Language with Rust
url: https://lunacookies.github.io/lang/
date: 2022-02-01
---!##

---##
title: book: The Rust Performance Book
url: https://nnethercote.github.io/perf-book/
date: 2022-02-01
---!##

---##
title: book: Comprehensive Rust
url: https://google.github.io/comprehensive-rust/
date: 2023-01-10
---!##

---##
title: book: Rust Atomics and Locks
url: https://marabos.nl/atomics/
date: 2023-01-10
---!##

---##
title: book: Profile-guided Optimization
url: https://doc.rust-lang.org/rustc/profile-guided-optimization.html
date: 2023-01-10
---!##

---##
title: book: The Rustonomicon
url: https://doc.rust-lang.org/nomicon/
date: 2023-01-10
---!##

---##
title: Dependency on rust removes support for a number of platforms for pyca/cryptography
url: https://lobste.rs/s/f4chm2/dependency_on_rust_removes_support_for, https://github.com/pyca/cryptography/issues/5771
date: 2022-08-01
---!##

---##
title: axum - Download file with resume
file: axum-download-file-resume.html
date: 2025-02-01
body:
How to serve a file with axum that supports resuming if interrupted
[gist.github.com/Andrew-Shay/566c18fc0e0e9ce721b7b85cdfd0c3ec](https://gist.github.com/Andrew-Shay/566c18fc0e0e9ce721b7b85cdfd0c3ec)

```
use axum::{
    body::Body,
    http::{header, StatusCode},
    response::IntoResponse,
    routing::get,
    Router,
};
use tokio::{fs::File, io::AsyncSeekExt};
use tokio_util::io::ReaderStream;

/// How to serve a file with axum that supports resuming if interrupted
/// https://andrewshay.me/digital-garden/rust/axum-download-file-resume.html
///
/// HOW TO USE
/// Create input.zip in your current working directory. Likely the same dir as Cargo.toml
/// $ cargo run
/// Note: This doesn't seem to work in Chrome. If you can solve it, let me know.
/// In Firefox go to 127.0.0.1:3000
/// You should see Hello, World!
/// Go to 127.0.0.1:3000/download
/// File should start downloading
/// Try pausing/resuming the download. And turning off the server mid download.
/// When you resume the download, it should continue from where it left off. It should NOT start over.
/// This is accomplished through CONTENT_RANGE and PARTIAL_CONTENT
///
/// Cargo.toml
/// [dependencies]
/// axum = "0.8.1"
/// tokio = { version = "1.43.0", features = ["full"] }
/// tokio-util = { version = "0.7.13", features = ["io"] }

#[tokio::main]
async fn main() {
    let app = Router::new()
        .route("/", get(root)) // Hello World test
        .route("/download", get(download)); // Downloads the file

    let listener = tokio::net::TcpListener::bind("127.0.0.1:3000")
        .await
        .unwrap();
    println!("listening...");
    axum::serve(listener, app).await.unwrap();
}

async fn root() -> &'static str {
    "Hello, World!"
}

// https://docs.rs/axum/latest/axum/extract/index.html
async fn download(headers: header::HeaderMap) -> impl IntoResponse {
    println!("\n\n######\n");
    println!("Request Headers\n{:?}\n", headers);

    // Get existing bytes downloaded.
    // The browser sends this information.
    // It may not exist when the download is first started.
    // Sample from Firefox "range": "bytes=715808768-"
    let range: u64 = match headers.get("range") {
        Some(range) => match range.to_str() {
            Ok(range) => {
                let mut split = range.split("=");
                match split.nth(1) {
                    Some(range) => {
                        let range = range.strip_suffix("-").unwrap_or(range);
                        let range: u64 = range.parse().unwrap_or(0);
                        range
                    }
                    None => 0,
                }
            }
            Err(_) => 0,
        },
        None => 0,
    };
    println!("Parsed range: {:?}\n", range);

    // Open file and seek into how much the browser has already downloaded
    let mut file = File::open("input.zip").await.unwrap();
    let file_len: u64 = file.metadata().await.unwrap().len();
    let bytes_left = (file_len - range).to_string();
    file.seek(std::io::SeekFrom::Start(range)).await.unwrap();

    // Response headers telling browser we have an attachment with a given range already into the file
    let reponse_headers = [
        (header::ACCEPT_RANGES, "bytes".to_string()),
        (header::CONTENT_TYPE, "application/octet-stream".to_string()),
        (header::CONTENT_LENGTH, bytes_left),
        (
            header::CONTENT_DISPOSITION,
            format!("attachment; filename=\"{}\"", "output.zip"), // attachment tells browser to download the file and not just display it
        ),
        (
            header::CONTENT_RANGE,
            format!("bytes {}-{}/{}", range, file_len - 1, file_len), // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range
        ),
    ];

    let stream = ReaderStream::new(file);
    println!("Response Headers\n{:?}", reponse_headers);
    (
        StatusCode::PARTIAL_CONTENT,
        reponse_headers,
        Body::from_stream(stream),
    )
}
```
---!##